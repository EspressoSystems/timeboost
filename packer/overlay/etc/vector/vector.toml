[sources.vector]
type = "internal_logs"

# Host

[sources.host]
type = "host_metrics"
collectors = ["memory"]
scrape_interval_secs = 30

[transforms.filtered-host]
type = "filter"
inputs = ["host"]
condition = { type = "vrl", source = ".name == \"memory_used_bytes\"" }

# Service

[sources.timeboost]
type = "journald"
include_units = ["timeboost"]

[transforms.to-json]
type = "remap"
inputs = ["timeboost"]
source = '''
    .message = object!(parse_json!(string!(.message)))

    if exists(.message.span) {
         span    = object!(del(.message.span))
        .message = merge!(.message, span)
    }
'''

[transforms.with-metadata]
type = "aws_ec2_metadata"
inputs = ["to-json"]
fields = [
    "ami-id",
    "availability-zone",
    "instance-id",
    "instance-type",
    "local-ipv4",
    "region",
    "subnet-id",
    "vpc-id",
    "role-name",
]

# Outputs

[sinks.console]
type = "console"
inputs = ["vector"]
encoding.codec = "text"

[sinks.aws-cloudwatch]
type = "aws_cloudwatch_logs"
inputs = ["with-metadata"]
region = "eu-central-1"
group_name = "timeboost"
encoding.codec = "json"
stream_name = "{{{{raw}}}}{{ host }}{{{{/raw}}}}"

[sinks.aws-cloudwatch-metrics]
type = "aws_cloudwatch_metrics"
inputs = ["filtered-host"]
region = "eu-central-1"
default_namespace = "timeboost"
